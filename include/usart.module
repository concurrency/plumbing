--** USART/serial reoutines for the ATmega1280
-- @module usart

#IF NOT (DEFINED (USART.MODULE))
#DEFINE USART.MODULE

--* Initialise iterrupt-driven serial IO
--
-- @param port Serial port (0, 1, 2, or 3)
-- @param baud Baud rate
PROC serial.setup (VAL INT port, VAL INT32 baud)
  VAL INT32 factor IS (((F.CPU / 16) + (baud / 2)) / baud) - 1:
  VAL [4]BYTE factor.bytes RETYPES factor:
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    ports[UBRRH[port]] := factor.bytes[1]
    ports[UBRRL[port]] := factor.bytes[0]

    ports[UCSRC[port]] := 3 << UCSZ[port]
    ports[UCSRB[port]] := BV (TXEN[port]) \/ BV (RXEN[port])
:

--* Write a byte to the serial port (interrupt-driven)
--
-- @param VAL INT Serial port (0, 1, 2, or 3)
-- @param VAL BYTE Byte to write
PROC serial.write.byte (VAL INT port, VAL BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSRA[port]] /\ BV (UDRE[port])) = 0
        --{{{  transmit buffer full; wait for it to empty
        SEQ
          -- Enable the interrupt; UDRIE0 will be cleared by the (C-side)
          -- interrupt handler.
          ports[UCSRB[port]] := ports[UCSRB[port]] \/ BV (UDRIE[port])
          INT dummy:
          wait.for.interrupt (VINTR.UDRE[port], dummy)
        --}}}
      TRUE
        SKIP
    ports[UDR[port]] := b
:

--* Read a byte from the serial port (interrupt-driven)
--
-- @param VAL INT Serial port (0, 1, 2, or 3)
-- @param VAL BYTE Byte to be read
PROC serial.read.byte (VAL INT port, RESULT BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSRA[port]] /\ BV (RXC[port])) = 0
        --{{{  receive buffer empty; wait for something to come in
        SEQ
          -- Enable the interrupt; RXCIE0 will be cleared by the (C-side)
          -- interrupt handler. (FIXME: This was RXCIE1... for port zero? Was that wrong?)
          ports[UCSRB[port]] := ports[UCSRB[port]] \/ BV (RXCIE[port])
          INT dummy:
          wait.for.interrupt (VINTR.RX[port], dummy)
        --}}}
      TRUE
        SKIP
    b := ports[UDR[port]]
:

--* Initialise the serial port (blocking).
--
-- @param port Serial port (0, 1, 2, or 3)
-- @param baud Baud rate
PROC serial.setup.blocking (VAL INT port, VAL INT32 baud)
  VAL INT32 factor IS (((F.CPU / 16) + (baud / 2)) / baud) - 1:
  VAL [4]BYTE factor.bytes RETYPES factor:
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    ports[UBRRH[port]] := factor.bytes[1]
    ports[UBRRL[port]] := factor.bytes[0]

    ports[UCSRC[port]] := 3 << UCSZ00
    ports[UCSRB[port]] := BV (TXEN[port])
:

--* Write a byte to the serial port (blocking).
--
-- @param VAL INT Serial port (0, 1, 2, or 3)
-- @param VAL BYTE Byte to write
PROC serial.write.byte.blocking (VAL INT port, VAL BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    WHILE (ports[UCSRA[port]] /\ BV (UDRE[port])) = 0
      SKIP
    ports[UDR[port]] := b
:

#ENDIF

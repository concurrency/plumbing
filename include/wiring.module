--** occam bindings for the Wiring API.
-- @module wiring

#IF NOT (DEFINED (WIRING.MODULE))
#DEFINE WIRING.MODULE

#INCLUDE "avr.module"
#INCLUDE "pinmapping.module"

--{{{  constants
--* Symbolic constant for digital LOW on an Arduino pin.
VAL INT LOW IS #0:
--* Symbolic constant for digital HIGH on an Arduino pin.
VAL INT HIGH IS #1:

VAL INT INPUT IS #0:
VAL INT OUTPUT IS #1:

VAL INT SERIAL  IS #0:
VAL INT DISPLAY IS #1:

VAL INT LSBFIRST IS 0:
VAL INT MSBFIRST IS 1:

VAL INT CHANGE IS 1:
VAL INT FALLING IS 2:
VAL INT RISING IS 3:

VAL INT INTERNAL IS 3:
VAL INT DEFAULT IS 1:
VAL INT EXTERNAL IS 0:

--}}}

--{{{  PROC beginSerial
--* Initialize serial port.
--
-- @para, port Serial port to initialize.
-- @param baud Baud rate.
PROC serialSetup (VAL INT port, VAL INT32 baud)
  serial.setup.blocking (port, baud)
:
--}}}

--{{{ PROC serialWriteByte
--* Write a byte to the serial port.
--
-- @param port Serial port to write to.
-- @param b Byte to write.
PROC serialWriteByte (VAL INT port, VAL BYTE b)
  serial.write.byte (port, b)
:
--}}}

--{{{  PROC serialWriteString
--* Write a string to the serial port.
--
-- @param port Serial port to write to.
-- @param string Bytes to write.
PROC serialWriteString (VAL INT port, VAL []BYTE string)
  SEQ i = 0 FOR SIZE string
    serial.write.byte (port, string[i])
:
--}}}

--{{{  PROC serialWriteInt
--* Write an [@code INT] to the serial port in hex.
--
-- @param port Serial port to write to.
-- @param n The integer to write.
PROC serialWriteInt (VAL INT port, VAL INT n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 3 FOR 4 STEP -1
    serial.write.byte (port, digits[(n >> (i * 4)) /\ #F])
:
--}}}

--{{{  PROC serialWriteInt32
--* Write an [@code INT32] to the serial port in hex.
--
-- @param port Serial port to write to.
-- @param n The long integer ([@code INT32]) to write.
PROC serialWriteInt32 (VAL INT port, VAL INT32 n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 7 FOR 8 STEP -1
    serial.write.byte (port, digits[INT ((n >> (i * 4)) /\ #F)])
:
--}}}

--{{{ PROC serialReadByte
--* Read a byte from the serial port.
--
-- @param port Serial port to read from.
-- @param b Byte to be read.
PROC serialReadByte (VAL INT port, RESULT BYTE b)
  serial.read.byte(port, b)
:
--}}}

#ENDIF

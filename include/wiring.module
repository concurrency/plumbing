--** occam bindings for the Wiring API.
-- @module wiring

#IF NOT (DEFINED (WIRING.MODULE))
#DEFINE WIRING.MODULE

#INCLUDE "avr.module"
#INCLUDE "io.module"
#INCLUDE "pinmapping.module"

--{{{  constants
--* Symbolic constant for digital LOW on an Arduino pin.
VAL INT LOW IS #0:
--* Symbolic constant for digital HIGH on an Arduino pin.
VAL INT HIGH IS #1:

VAL INT INPUT IS #0:
VAL INT OUTPUT IS #1:

VAL INT SERIAL  IS #0:
VAL INT DISPLAY IS #1:

VAL INT LSBFIRST IS 0:
VAL INT MSBFIRST IS 1:

VAL INT CHANGE IS 1:
VAL INT FALLING IS 2:
VAL INT RISING IS 3:

VAL INT INTERNAL IS 3:
VAL INT DEFAULT IS 1:
VAL INT EXTERNAL IS 0:

--}}}

-- Most of the methods below are, at this point, pass-through methods.
-- Probably wants to change pretty soon, but this way neither wiring nor
--  plumbing are touching ports[..]

--{{{  PROC delay
--* Wait for a period of time.
-- @param millis Time in wait, in milliseconds
PROC delay (VAL INT millis)
  TIMER tim:
  INT t:
  SEQ
    tim ? t
    tim ? AFTER t PLUS millis
:
--}}}

--{{{  PROC digitalWrite
--* Sets the state of a pin to either HIGH or LOW.
-- @param pin The Arduino pin number.
-- @param state Either HIGH or LOW.
PROC digitalWrite (VAL INT pin, state)
  INT r.ddr, r.port, r.pin, bit:
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    r.ddr, r.port, r.pin, bit := pin.location (pin)
    ports[r.port] := (ports[r.port] /\ (~BV (bit))) \/ ((BYTE state) << bit)
:
--}}}
--{{{  PROC digitalRead
--* Read the value of a digital pin. Either HIGH or LOW.
-- @param pin The Arduino pin number.
-- @param state The state of the pin will be stored in this variable.
PROC digitalRead (VAL INT pin, RESULT INT state)
  INT r.ddr, r.port, r.pin, bit:
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    r.ddr, r.port, r.pin, bit := pin.location (pin)
    state := (INT ((ports[r.pin] /\ (BV (bit))) >> bit))
:
--}}}


--{{{  PROC pinMode
PROC pinMode (VAL INT pin, mode)
  INT r.ddr, r.port, r.pin, bit:
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    r.ddr, r.port, r.pin, bit := pin.location (pin)
    ports[r.ddr] := (ports[r.ddr] /\ (~BV (bit))) \/ ((BYTE mode) << bit)
:
--}}}

--{{{  PROC beginSerial
--* Initialise serial port 1.
-- @param baud Baud rate
PROC beginSerial (VAL INT32 baud)
  beginSerial.blocking (0, baud)
:
--}}}

--{{{  PROC serialWrite
--* Write a string to the serial port.
-- @param string Bytes to write
PROC serialWrite (VAL []BYTE string)
  SEQ i = 0 FOR SIZE string
    serialWriteByte.blocking (0, string[i])
:
--}}}
--{{{  PROC serialWriteInt
--* Write an [@code INT] to the serial port in hex.
-- @param n The integer to write.
PROC serialWriteInt (VAL INT n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 3 FOR 4 STEP -1
    serialWriteByte.blocking (0, digits[(n >> (i * 4)) /\ #F])
:
--}}}
--{{{  PROC serialWriteInt32
--* Write an [@code INT32] to the serial port in hex.
-- @param n The long integer ([@code INT32]) to write.
PROC serialWriteInt32 (VAL INT32 n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 7 FOR 8 STEP -1
    serialWriteByte.blocking (0, digits[INT ((n >> (i * 4)) /\ #F)])
:
--}}}


-- As of June 22, haven't touched the code below.
-- Still trying to figure out io.module, so not sure what to do about analog

VAL INT NO.MAP IS (- 1):
VAL INT INDEX.OFFSET IS 3:
VAL []INT ARDUINO.PIN.MAP IS [5, NO.MAP, 1, 0, NO.MAP, NO.MAP, 2, 3, 4]:
VAL []INT TCR.MODE IS [TCCR0A, TCCR0A, TCCR1A, TCCR1A, TCCR2A, TCCR2A]:
VAL []INT TCR.PRESCALE IS [TCCR0B, TCCR0B, TCCR1B, TCCR1B, TCCR2B, TCCR2B]:
VAL []INT CS1 IS [CS01, CS01, CS11, CS11, CS22, CS22]:
VAL []INT CS0 IS [CS00, CS00, CS10, CS10, CS22, CS22]:
VAL []INT COM IS [COM0A1, COM0B1, COM1A1, COM1B1, COM2A1, COM2B1]:
VAL []INT WGM IS [WGM00, WGM00, WGM10, WGM10, WGM20, WGM20]:
VAL []INT OCR IS [OCR0A, OCR0B, OCR1A, OCR1B, OCR2A, OCR2B]:

--{{{  PROC beginAnalog
--* Initialize analog input.
-- Only works on PWM pins. 
-- @param pin The Arduino pin number.
PROC beginAnalog (VAL INT pin)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INITIAL INT index IS ARDUINO.PIN.MAP[pin - INDEX.OFFSET]:
  SEQ
    pinMode(pin, OUTPUT) 
    ports[TCR.MODE[index]] := ports[TCR.MODE[index]] \/ (BV (COM[index]) \/ BV (WGM[index]))
    -- Set prescale to 64... don't change that. The VM is using that
    -- for TCCR2, and we'll (for the moment) use the same everywhere.
    ports[TCR.PRESCALE[index]] := BV(CS1[index]) \/ BV(CS0[index])
    ports[OCR[index]] := 0
:
--}}}

--{{{  PROC analogWrite
--* Write an analog value to a pin.
-- @param pin The Arduino pin number.
-- @param level A [@code BYTE] representing the analog level (0 -> 255)
PROC analogWrite (VAL INT pin, VAL BYTE level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INITIAL INT index IS ARDUINO.PIN.MAP[pin - INDEX.OFFSET]:
  SEQ
    ports[OCR[index]] := level
:
--}}}

--{{{  PROC endAnalog
--* Disable analog output on Arduino.
-- Only works on PWM pins.
-- @param pin The Arduino pin number.
PROC endAnalog (VAL INT pin)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INITIAL INT index IS ARDUINO.PIN.MAP[pin - INDEX.OFFSET]:
  SEQ
    ports[TCR.MODE[index]] := ports[TCR.MODE[index]] /\ (~ BV(COM[index]))
:
--}}}

-- FIXME: I'm thinking the only pins that can queue into the 16 bit
--  timer are 9 and 10... Can they run simultaniously?


INLINE PROC set16breg (VAL INT reg, VAL INT16 val)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    -- It looks like the high byte is always one greater
    -- than the low byte. For example:
    -- OCR1A = OCR1AL
    -- OCR1AL + 1 = OCR1AH
    -- According to the datasheet, we have to write the high byte first.
    ports[reg+1] := (BYTE (val >> 8)) 
    ports[reg] := (BYTE (val BITAND #FF))
:

-- Pin can only be 9 or 10
PROC beginAnalog16 (VAL INT pin)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    pinMode(pin, OUTPUT)
    ports[TCCR1B] := BV (WGM13) \/ BV (CS10)
    IF
      pin = 9
        ports[TCCR1A] := ports[TCCR1A] \/ BV (COM1A1)
        ports[OCR1A] := 0
      pin = 10
        ports[TCCR1A] := ports[TCCR1A] \/ BV (COM1B1)
        ports[OCR1B] := 0
      TRUE
        SKIP
:

-- Again, pin can only be 9 or 10. I think.
PROC analogWrite16 (VAL INT pin, VAL INT16 level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  IF
    pin = 9
      set16breg (OCR1A, level)
    pin = 10
      set16breg (OCR1B, level)
    TRUE
      SKIP
:
#ENDIF

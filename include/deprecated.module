--
--	Copyright (C) 2009-2010   Christian Jacobsen
--      Copyright (C) 2009-2010   Matt Jadud
--      Copyright (C)      2010   Michael Andrew Pirrone-Brusse
--      Copyright (C) 2009-2010   Adam Sampson
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.
--



-- This is a module of deprecated code. The kind of cruft we'd like to keep
-- as a reference, but should not actually be used anywhere.

-- Mostly created so that occamdoc doesn't catch depricated PROCs.

--{{{ DEPRECATED FROM PLUMBING
#IF FALSE
-- While this is a nice interrupt-driven approach to ADC,
-- it is not parallel-safe. Because we deschedule when doing a reading,
-- someone else can come in and start another. I have replaced this 
-- with a busywait version until I can come up with a better solution.
--
-- The busywait obviously blocks our runtime until a reading finishes.
-- However, it eliminates the critical section.
PROC adc (VAL INT pin, CHAN SIGNAL req?, CHAN INT val!)
  PLACED [MAX.PORT]BYTE ports 0:
  INT16 result:   
  SEQ
    -- Reference voltage is Vcc; select channel
    ports[ADMUX] := (1 << REFS0) \/ (BYTE pin)
    -- Enable ADC; enable interrupt; clock prescale 128
    ports[ADCSRA] := (BV (ADEN) \/ BV (ADIE)) \/ (7 << ADPS0)
    -- Disable digital inputs on all six ADC pins
    ports[DIDR0] := #3F
    WHILE TRUE
      SEQ
        req ? SIGNAL
        -- Start conversion
        ports[ADCSRA] := ports[ADCSRA] \/ BV (ADSC)

        -- serialWrite("Waiting for conversion...")
        -- Wait for conversion to complete
        INT t:
        wait.for.interrupt (VINTR.ADC, t)

        -- Read value
        -- (We can't do this by retyping ports, since that does a 16-bit read)
        [2]BYTE bytes RETYPES result:
        bytes[0], bytes[1] := ports[ADCL], ports[ADCH]

        val ! (INT result)
:


-- This version of digital.input is so much specific to the arduino.
-- I think the version above is better, but it mgiht not be tested yet..
--* Read digital levels on pin 2 or 3.
-- For only pin 2 or pin 3 on the Arduino, this procedure
-- will output a LEVEL (either LOW or HIGH) whenever the
-- pin changes value.
--
-- @param pin The Arduino pin number (2 or 3 only)
-- @param out The LEVEL, output when the pin changes level.
PROC digital.input (VAL INT pin, CHAN LEVEL out!)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT wl:
  INITIAL INT vintr IS (-1):
  LEVEL level, last.level:
  PROC read ()
    SEQ
      digital.read (pin, wl)
      level := LEVEL wl
  :
  SEQ
    CASE pin
      2
        SEQ
          vintr := VINTR.INT0
          ports[EICRA] := (ports[EICRA] /\ (~(3 << ISC00))) \/ (1 << ISC00)
          ports[EIMSK] := ports[EIMSK] \/ (BV (INT0))
      3
        SEQ
          vintr := VINTR.INT1
          ports[EICRA] := (ports[EICRA] /\ (~(3 << ISC10))) \/ (1 << ISC10)
          ports[EIMSK] := ports[EIMSK] \/ (BV (INT1))
      ELSE
        die ("pin does not support interrupts")
    read ()
    last.level := level
    WHILE TRUE
      SEQ
        IF
          level <> last.level
            out ! level
          TRUE
            SKIP
        INT any:
        wait.for.interrupt (vintr, any)
        read ()
:

--* Watches for button presses on pin 2 or 3.
-- When a button is pressed (must be attached to pin 2 or 3)
-- a SIGNAL is generated. Uses digital.input, debounce, and 
-- level.to.signal.
--
-- @param pin The pin the button is connected to (must be 2 or 3)
-- @param out SIGNALs generated when the button is pressed.
PROC button.press (VAL INT pin, CHAN SIGNAL out!)
  CHAN LEVEL a, b:
  PAR
    digital.input (pin, a!)
    debounce (a?, b!)
    level.to.signal (b?, out!)
:

#ENDIF
--}}}

#IF NOT (DEFINED (CHIPMAP.MODULE))
#DEFINE CHIPMAP.MODULE


VAL INT DDRX  IS -1:
VAL INT PORTX IS -1:
VAL INT PINX  IS -1:

--------- DDR.MAP --------------------------------------------
VAL []INT DDR.MAP IS [DDRG, DDRE, DDRE, DDRE, DDRE, DDRE, DDRE, DDRE, DDRE, DDRX, DDRX, DDRH, DDRH, DDRH, DDRH, DDRH, DDRH, DDRH, DDRB, DDRB, DDRB, DDRB, DDRB, DDRB, DDRB, DDRB, DDRH, DDRG, DDRG, DDRX, DDRX, DDRX, DDRX, DDRX, DDRL, DDRL, DDRL, DDRL, DDRL, DDRL, DDRL, DDRL, DDRD, DDRD, DDRD, DDRD, DDRD, DDRD, DDRD, DDRD, DDRG, DDRG, DDRC, DDRC, DDRC, DDRC, DDRC, DDRC, DDRC, DDRC, DDRX, DDRX, DDRJ, DDRJ, DDRJ, DDRJ, DDRJ, DDRJ, DDRJ, DDRG, DDRA, DDRA, DDRA, DDRA, DDRA, DDRA, DDRA, DDRA, DDRJ, DDRX, DDRX, DDRK, DDRK, DDRK, DDRK, DDRK, DDRK, DDRK, DDRK, DDRF, DDRF, DDRF, DDRF, DDRF, DDRF, DDRF, DDRF, DDRX, DDRX, DDRX]:

--------- PORT.MAP ---------------------------------------------------
VAL []INT PORT.MAP IS [PORTG, PORTE, PORTE, PORTE, PORTE, PORTE, PORTE, PORTE, PORTE, PORTX, PORTX, PORTH, PORTH, PORTH, PORTH, PORTH, PORTH, PORTH, PORTB, PORTB, PORTB, PORTB, PORTB, PORTB, PORTB, PORTB, PORTH, PORTG, PORTG, PORTX, PORTX, PORTX, PORTX, PORTX, PORTL, PORTL, PORTL, PORTL, PORTL, PORTL, PORTL, PORTL, PORTD, PORTD, PORTD, PORTD, PORTD, PORTD, PORTD, PORTD, PORTG, PORTG, PORTC, PORTC, PORTC, PORTC, PORTC, PORTC, PORTC, PORTC, PORTX, PORTX, PORTJ, PORTJ, PORTJ, PORTJ, PORTJ, PORTJ, PORTJ, PORTG, PORTA, PORTA, PORTA, PORTA, PORTA, PORTA, PORTA, PORTA, PORTJ, PORTX, PORTX, PORTK, PORTK, PORTK, PORTK, PORTK, PORTK, PORTK, PORTK, PORTF, PORTF, PORTF, PORTF, PORTF, PORTF, PORTF, PORTF, PORTX, PORTX, PORTX]:

--------- PIN.MAP ---------------------------------------------------
VAL []INT PIN.MAP IS [PING, PINE, PINE, PINE, PINE, PINE, PINE, PINE, PINE, PINX, PINX, PINH, PINH, PINH, PINH, PINH, PINH, PINH, PINB, PINB, PINB, PINB, PINB, PINB, PINB, PINB, PINH, PING, PING, PINX, PINX, PINX, PINX, PINX, PINL, PINL, PINL, PINL, PINL, PINL, PINL, PINL, PIND, PIND, PIND, PIND, PIND, PIND, PIND, PIND, PING, PING, PINC, PINC, PINC, PINC, PINC, PINC, PINC, PINC, PINX, PINX, PINJ, PINJ, PINJ, PINJ, PINJ, PINJ, PINJ, PING, PINA, PINA, PINA, PINA, PINA, PINA, PINA, PINA, PINJ, PINX, PINX, PINK, PINK, PINK, PINK, PINK, PINK, PINK, PINK, PINF, PINF, PINF, PINF, PINF, PINF, PINF, PINF, PINX, PINX, PINX]:

--------- BIT.MAP ---------------------------------------------------
VAL []INT BIT.MAP IS [5, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 7, 7, 3, 4, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, 0, 1, 2, 3, 4, 5, 6, 2, 7, 6, 5, 4, 3, 2, 1, 0, 7, -1, -1, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1, -1]:

-- It would be nice if this wasn't duplicated in each architecture.
INT, INT, INT, INT FUNCTION chip.to.gpio (VAL INT avr.pin) 
  INT ddr, port, pin, bit:
  VALOF
    SEQ
      ddr  := DDR.MAP[avr.pin - 1]
      port := PORT.MAP[avr.pin - 1]
      pin  := PIN.MAP[avr.pin - 1]
      bit  := BIT.MAP[avr.pin - 1]
    RESULT ddr, port, pin, bit
:

#ENDIF

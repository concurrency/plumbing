--** Pulse Width Modulation board-specific helper functions for the ATmega1280
-- @module pwm_arch


#IF NOT (DEFINED (PWMARCH.MODULE))
#DEFINE PWMARCH.MODULE

--This is a stub. It will change soon.

INT, INT, INT, BYTE FUNCTION pwm8.lookup (VAL INT board.pin)
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits:
  VALOF
    SEQ
      CASE board.pin
        2
          SEQ
            TCCRnA := TCCR3A
            TCCRnB := TCCR3B
            TCCRnA.bits := (BV (WGM30) \/ BV (COM3B1))
            OCRnx := OCR3B
        3
          SEQ
            TCCRnA := TCCR4A
            TCCRnB := TCCR4B
            TCCRnA.bits := (BV (WGM40) \/ BV (COM4C1))
            OCRnx := OCR4C
        4
          SEQ
            TCCRnA := TCCR0A
            TCCRnB := TCCR0B
            TCCRnA.bits := (BV (WGM30) \/ BV (COM0B1))
            OCRnx := OCR0B
        5
          SEQ
            TCCRnA := TCCR3A
            TCCRnB := TCCR3B
            TCCRnA.bits := (BV (WGM30) \/ BV (COM3A1))
            OCRnx := OCR3A
        6
          SEQ
            TCCRnA := TCCR4A
            TCCRnB := TCCR4B
            TCCRnA.bits := (BV (WGM40) \/ BV (COM4A1))
            OCRnx := OCR4A
        7
          SEQ
            TCCRnA := TCCR4A
            TCCRnB := TCCR4B
            TCCRnA.bits := (BV (WGM40) \/ BV (COM4B1))
            OCRnx := OCR4B
        8
          SEQ
            TCCRnA := TCCR4A
            TCCRnB := TCCR4B
            TCCRnA.bits := (BV (WGM40) \/ BV (COM4C1))
            OCRnx := OCR4C
        9
          SEQ
            TCCRnA := TCCR2A
            TCCRnB := TCCR2B
            TCCRnA.bits := (BV (WGM20) \/ BV (COM2B1))
            OCRnx := OCR2B
        10
          SEQ
            TCCRnA := TCCR2A
            TCCRnB := TCCR2B
            TCCRnA.bits := (BV (WGM20) \/ BV (COM2A1))
            OCRnx := OCR2A
        11
          SEQ
            TCCRnA := TCCR1A
            TCCRnB := TCCR1B
            TCCRnA.bits := (BV (WGM10) \/ BV (COM1A1))
            OCRnx := OCR1A
        12
          SEQ
            TCCRnA := TCCR1A
            TCCRnB := TCCR1B
            TCCRnA.bits := (BV (WGM10) \/ BV (COM1B1))
            OCRnx := OCR1B
        13
          SEQ
            TCCRnA := TCCR0A
            TCCRnB := TCCR0B
            TCCRnA.bits := (BV (WGM00) \/ BV (COM0A1))
            OCRnx := OCR0A
        44
          SEQ
            TCCRnA := TCCR5A
            TCCRnB := TCCR5B
            TCCRnA.bits := (BV (WGM50) \/ BV (COM5C1))
            OCRnx := OCR5C
        45
          SEQ
            TCCRnA := TCCR5A
            TCCRnB := TCCR5B
            TCCRnA.bits := (BV (WGM50) \/ BV (COM5B1))
            OCRnx := OCR5B
        46
          SEQ
            TCCRnA := TCCR5A
            TCCRnB := TCCR5B
            TCCRnA.bits := (BV (WGM50) \/ BV (COM5C1))
            OCRnx := OCR5C
        ELSE
          die ("The ArduinoMega does not support PWM on that pin.")
    RESULT TCCRnA, TCCRnB, OCRnx, TCCRnA.bits
:

INT, INT, INT, BYTE FUNCTION pwm16.lookup (VAL INT pin)
  INT a, b, c:
  BYTE d:
  VALOF
    a, b, c, d := 1, 2, 3, 4
    RESULT a, b, c, d
:

BYTE FUNCTION pwm8.TCCRnB.helper (VAL INT prescale)
  BYTE a:
  VALOF
    a := 1
    RESULT a
:

BYTE FUNCTION pwm16.TCCRnB.helper (VAL INT prescale)
  BYTE a:
  VALOF
    a := 1
    RESULT a
:

INT FUNCTION pwm8.compare.lookup (VAL INT pin)
  INT a:
  VALOF
    a := 1
    RESULT a
:

INT FUNCTION pwm16.compare.lookup (VAL INT pin)
  INT a:
  VALOF
    a := 1
    RESULT a
:

INT FUNCTION pwm16.ICRn.lookup (VAL INT pin)
  INT a:
  VALOF
    a := 1
    RESULT a
: 

#ENDIF

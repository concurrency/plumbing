--** Input/output routines for the AVR.
-- @module io

#IF NOT (DEFINED (IO.MODULE))
#DEFINE IO.MODULE

#INCLUDE "avr.module"
#INCLUDE "base.module"

-- Note to self: This is io.module fro the 328p.

PROC adc.io (VAL INT pin, RESULT INT v)
  PLACED [MAX.PORT]BYTE ports 0:
  INT16 result:
  SEQ
    -- Enable ADC; enable interrupt; clock prescale 128
    ports[ADCSRA] := (BV (ADEN) \/ BV (ADIE)) \/ (7 << ADPS0)
    -- Disable digital inputs on all 6 (well, 8, really) ADC pins.
    -- FIXME: Seems a bit much? Perhaps we should pinpoint which pin to switch?
    ports[DIDR0] := #3F

    -- Select the channel
    ports[ADMUX] := BV (REFS0) \/ (BYTE pin)

    -- Start conversion
    ports[ADCSRA] := ports[ADCSRA] \/ BV (ADSC)
    WHILE ((ports[ADCSRA] /\ BV(ADSC)) = BV (ADSC))
      SKIP

    -- Read value
    -- (We can't do this by retyping ports, since that does a 16-bit read)
    [2]BYTE bytes RETYPES result:
    bytes[0], bytes[1] := ports[ADCL], ports[ADCH]

    v := (INT result)
:

--{{{  PROC beginSerial
--* Initialise the serial port.
--* Not tested for the 1280.
-- @param baud Baud rate
PROC beginSerial.blocking (VAL INT reg, VAL INT32 baud)
  VAL INT32 factor IS (((F.CPU / 16) + (baud / 2)) / baud) - 1:
  VAL [4]BYTE factor.bytes RETYPES factor:

  PLACED [MAX.PORT]BYTE ports 0:
  SEQ
    ports[UBRR0H] := factor.bytes[1]
    ports[UBRR0L] := factor.bytes[0]

    ports[UCSR0C] := 3 << UCSZ00
    ports[UCSR0B] := BV (TXEN0)
:
--}}}
--{{{  PROC beginSerialInerrupt
--* Initialise iterrupt-driven serial IO for port1.
--* Lifted from ledmatrix.occ & not tested for the 1280
-- @param baud Baud rate
PROC serial.setup (VAL INT reg, VAL INT32 baud)
  VAL INT32 factor IS (((F.CPU / 16) + (baud / 2)) / baud) - 1:
  VAL [4]BYTE factor.bytes RETYPES factor:

  PLACED [MAX.PORT]BYTE ports 0:
  SEQ
    ports[UBRR0H] := factor.bytes[1]
    ports[UBRR0L] := factor.bytes[0]

    ports[UCSR0C] := 3 << UCSZ00
    ports[UCSR0B] := BV (TXEN0) \/ BV (RXEN0)
:
--}}}

--{{{  PROC serialWrite
--* Write a string to the serial port.
-- @param string Bytes to write
PROC serialWriteByte.blocking (VAL INT reg, VAL BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    WHILE (ports[UCSR0A] /\ BV (UDRE0)) = 0
      SKIP
    ports[UDR0] := b
:
--}}}

--{{{  PROC serial.write
-- Not tested for the 1280
PROC serial.write.byte (VAL INT reg, VAL BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSR0A] /\ BV (UDRE0)) = 0
        --{{{  transmit buffer full; wait for it to empty
        SEQ
          -- Enable the interrupt; UDRIE0 will be cleared by the (C-side)
          -- interrupt handler.
          ports[UCSR0B] := ports[UCSR0B] \/ BV (UDRIE0)
          INT dummy:
          wait.for.interrupt (VINTR.USART.UDRE, dummy)
        --}}}
      TRUE
        SKIP
    ports[UDR0] := b
:
--}}}
--{{{  PROC serialWriteInt
--* Write an [@code INT] to the serial port in hex.
-- @param n The integer to write.
PROC serial.write.int (VAL INT usart, VAL INT n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 3 FOR 4 STEP -1
    serial.write.byte (usart, digits[(n >> (i * 4)) /\ #F])
:
--}}}
--{{{  PROC serialWriteInt32
--* Write an [@code INT32] to the serial port in hex.
-- @param n The long integer ([@code INT32]) to write.
PROC serial.write.int32 (VAL INT usart, VAL INT32 n)
  VAL []BYTE digits IS "0123456789abcdef":
  SEQ i = 7 FOR 8 STEP -1
    serial.write.byte (usart, digits[INT ((n >> (i * 4)) /\ #F)])
:
--}}}

--{{{  PROC serial.read
-- Not tested for the 1280
PROC serial.read.byte (VAL INT reg, RESULT BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSR0A] /\ BV (RXC0)) = 0
        --{{{  receive buffer empty; wait for something to come in
        SEQ
          -- Enable the interrupt; RXCIE0 will be cleared by the (C-side)
          -- interrupt handler.
          ports[UCSR0B] := ports[UCSR0B] \/ BV (RXCIE0)
          INT dummy:
          wait.for.interrupt (VINTR.USART.RX, dummy)
        --}}}
      TRUE
        SKIP
    b := ports[UDR0]
:
--}}}

#ENDIF

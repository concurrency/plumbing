--** Pulse Width Modulation board-specific helper functions for the ATmega328
-- @module pwm_arch


#IF NOT (DEFINED (PWMARCH.MODULE))
#DEFINE PWMARCH.MODULE

INT, INT, INT, BYTE, BYTE FUNCTION pwm8.lookup (VAL INT avr.pin)
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:
  VALOF
    SEQ
      TCCRnB.bits := 0
      CASE avr.pin
        5
          SEQ
            TCCRnA := TCCR2A
            TCCRnB := TCCR2B
            TCCRnA.bits := (BV (WGM20) \/ BV (COM2B1))
            OCRnx := OCR2B
        11
          SEQ
            TCCRnA := TCCR0A
            TCCRnB := TCCR0B
            TCCRnA.bits := (BV (WGM00) \/ BV (COM0B1))
            OCRnx := OCR0B
        12
          SEQ
            TCCRnA := TCCR0A
            TCCRnB := TCCR0B
            TCCRnA.bits := (BV (WGM00) \/ BV (COM0A1))
            OCRnx := OCR0A
        15
          SEQ
            TCCRnA := TCCR1A
            TCCRnB := TCCR1B
            TCCRnA.bits := (BV (WGM10) \/ BV (COM1A1))
            OCRnx := OCR1A
        16
          SEQ
            TCCRnA := TCCR1A
            TCCRnB := TCCR1B
            TCCRnA.bits := (BV (WGM10) \/ BV (COM1B1))
            OCRnx := OCR1B
        17
          SEQ
            TCCRnA := TCCR2A
            TCCRnB := TCCR2B
            TCCRnA.bits := (BV (WGM20) \/ BV (COM2A1))
            OCRnx := OCR2A
        ELSE
          die ("The Arduino only supports 8-bit PWM on pins 3,5,6,9,10 and 11.")
    RESULT TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits
:

INT, INT, INT, BYTE, BYTE FUNCTION pwm16.lookup (VAL INT avr.pin)
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:
  VALOF
    SEQ
      TCCRnA := TCCR1A
      TCCRnB := TCCR1B
      TCCRnB.bits := BV (WGM13)
      CASE avr.pin
        15
          SEQ
            TCCRnA.bits := (BV (COM1A1))
            OCRnx := OCR1A
        16
          SEQ
            TCCRnA.bits := (BV (COM1B1))
            OCRnx := OCR1B
        ELSE
          die ("The Arduino only supports 16-bit PWM on pins 9 and 10.")
    RESULT TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits
:

BYTE FUNCTION pwm8.TCCRnB.helper (VAL BYTE TCCRnB.bits, VAL INT prescale)
  BYTE bits:
  VALOF
    SEQ
      CASE prescale
        0
          bits := TCCRnB.bits \/ #01 -- := BV (CSn0)
        8
          bits := TCCRnB.bits \/ #02 -- := BV (CSn1)
        64
          bits := TCCRnB.bits \/ #03 -- := BV (CSn0) \/ BV (CSn1)
        256
          bits := TCCRnB.bits \/ #04 -- := BV (CSn2)
        1024
          bits := TCCRnB.bits \/ #05 -- := BV (CSn2) \/ BV (CSn0)
        ELSE
          die ("Invalid clock prescale value")
    RESULT bits
:

BYTE FUNCTION pwm16.TCCRnB.helper (VAL BYTE TCCRnB.bits, VAL INT prescale)
  BYTE bits:
  VALOF
    CASE prescale
      0
        bits := TCCRnB.bits \/ #01 -- := BV (CSn0)
      8
        bits := TCCRnB.bits \/ #02 -- := BV (CSn1)
      64
        bits := TCCRnB.bits \/ #03 -- := BV (CSn0) \/ BV (CSn1)
      256
        bits := TCCRnB.bits \/ #04 -- := BV (CSn2)
      1024
        bits := TCCRnB.bits \/ #05 -- := BV (CSn2) \/ BV (CSn0)
      ELSE
        die ("Invalid clock prescale value")
    RESULT bits
:

INT FUNCTION pwm8.compare.lookup (VAL INT avr.pin)
  INT OCRnx:
  VALOF
    CASE avr.pin
      5
        OCRnx := OCR2B
      11
        OCRnx := OCR0B
      12
        OCRnx := OCR0A
      15
        OCRnx := OCR1A
      16
        OCRnx := OCR1B
      17
        OCRnx := OCR2A
      ELSE
        die ("The Arduino only supports 8-bit PWM on pins 3,5,6,9,10 and 11.")
    RESULT OCRnx
:

INT FUNCTION pwm16.compare.lookup (VAL INT avr.pin)
  INT OCRnx:
  VALOF
    CASE avr.pin
      15
        OCRnx := OCR1A
      16
        OCRnx := OCR1B
      ELSE
        die ("The Arduino only supports 16-bit PWM on pins 9 and 10.")
    RESULT OCRnx
:

INT FUNCTION pwm16.ICRn.lookup (VAL INT avr.pin)
  INT ICRn:
  VALOF
    CASE avr.pin
      15, 16
        ICRn := ICR1
      ELSE
        die ("The Arduino only supports 16-bit PWM on pins 9 and 10.")
    RESULT ICRn
: 

#ENDIF

--** Procs for fiddling with digital pin things
--FIXME: Rewrite that.
-- @module digital

#IF NOT (DEFINED (DIGITAL.MODULE))
#DEFINE DIGITAL.MODULE

-- In this module, we use "pin" to denote an actual AVR pin.
-- We will provide digital.write at a higher level to 
-- denote a board's pins (which are mapped to the AVR's pins.)

--{{{  PROC pin.write
--* Sets the state of a pin to either HIGH or LOW.
-- @param r.port The port (PORTB, PORTC, etc.) on the ATmega
-- @param bit The bit in the port (0 - 7)
-- @param state Either HIGH or LOW
INLINE PROC pin.write (VAL INT r.port, bit, state)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  ports[r.port] := (ports[r.port] /\ (~BV (bit))) \/ ((BYTE state) << bit)
:
--}}}


INLINE PROC pin.read (VAL INT r.pin, bit, RESULT INT state)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  state := (INT ((ports[r.pin] /\ (BV (bit))) >> bit))
:

INLINE PROC pin.mode (VAL INT r.ddr, bit, mode)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  ports[r.ddr] := (ports[r.ddr] /\ (~BV (bit))) \/ ((BYTE mode) << bit)
:

#ENDIF

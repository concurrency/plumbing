--** Common routines for configuring PWM on the ATmega family of processors.
--
-- The operation of PWMs should be improved and made to be significantly more
-- modular and robust by turning it into a PROTOCOL based process.
-- This can be done Later.
-- @module pwm

#IF NOT (DEFINED (PWM.MODULE))
#DEFINE PWM.MODULE

--FIXME: MCJ
-- I would love to come up with a better naming convention
-- for the arch-specific part...
#INCLUDE "pwmarch.module" 

--{{{ PROC set16 
--* Converst the incoming INT val to a pair of BYTEs that are then written
-- into a pair of adjacent register that then act as a single 17bit number.
--
-- We're operating under the assumption that the high byte is always one 
-- greater than the low byte.
-- Honestly not that trilled about it, but it seems to work.
--
-- An example:
-- OCR1A = OCR1AL
-- OCR1AL + 1 = OCR1AH
-- According to the datasheet, we always have to write the high byte first.
-- @param reg The [@em low] register to be written to -- The high register
--   (to which the higher-half of the INT gets written to) will be found
--   automagically.
-- @param val The value to be written into the register pair.
INLINE PROC set16 (VAL INT reg, VAL INT val)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    ports[reg+1] := (BYTE (val >> 8)) 
    ports[reg] := (BYTE (val BITAND #FF))
:
--}}}

--{{{ PROC pwm8.setup
--* Sets up the given pin to opperate with phase-correct Pulse Width
-- Modulation on an 8 bit timer.
-- Be aware that not every pin on any given board or architecture
-- can be operated as a PWM Pin. Consult your board for information on which
-- pins can produce PWM.
-- 
-- We make a number of assumptions in this method. I'd very much liek to
-- rewrite this into a PROTOCOL so we don't need to make assumptions about
-- the PWM mode, compare up- vs. down-counting, etc.
-- @param avr.pin The [@em Architecture] pin to activate PWM on.
-- @param prescale The prescaler value to set with PWM.
PROC pwm8.setup (VAL INT avr.pin, prescale)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:

  SEQ
    TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits := pwm8.lookup (avr.pin)
    TCCRnB.bits := pwm8.TCCRnB.helper (TCCRnB.bits, prescale)
    ports[TCCRnA] := ports[TCCRnA] \/ TCCRnA.bits
    ports[TCCRnB] := ports[TCCRnB] \/ TCCRnB.bits
    ports[OCRnx]  := 0
:
--}]}

--{{{ PROC pwm16.setup
--* Sets up the given pin to opperate with phase-correct Pulse Width
-- Modulation on a 16 bit timer.
-- Be aware that not every pin on any given board or architecture
-- can be operated as a PWM Pin. Consult your board for information on which
-- pins can produce PWM.
-- 
-- We make a number of assumptions in this method. I'd very much liek to
-- rewrite this into a PROTOCOL so we don't need to make assumptions about
-- the PWM mode, compare up- vs. down-counting, etc.
-- @param avr.pin The [@em Architecture] pin to activate PWM on.
-- @param prescale The prescaler value to set with PWM.
PROC pwm16.setup (VAL INT avr.pin, prescale)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INT TCCRnA, TCCRnB, OCRnx:
  BYTE TCCRnA.bits, TCCRnB.bits:

  SEQ
    TCCRnA, TCCRnB, OCRnx, TCCRnA.bits, TCCRnB.bits := pwm16.lookup (avr.pin)
    TCCRnB.bits := pwm16.TCCRnB.helper (TCCRnB.bits, prescale)
    ports[TCCRnA] := ports[TCCRnA] \/ TCCRnA.bits
    ports[TCCRnB] := ports[TCCRnB] \/ TCCRnB.bits
    ports[OCRnx]  := 0
:
--}}}

--{{{ PROC pwm8.set.compare
--* Sets the compare register on the given PWM pin.
-- @param avr.pin The [@em Architecture] pin to activate PWM on.
-- @param level The new level to set the compare register to.
PROC pwm8.set.compare (VAL INT avr.pin, VAL BYTE level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  -- INITIAL INT OCRnx IS pwm8.compare.lookup (avr.pin):
  INT OCRnx:
  SEQ
    -- serial.write.byte(0, BYTE (65 + avr.pin))
    -- serial.write.byte(0, '*n')
    OCRnx := pwm8.compare.lookup (avr.pin)
    -- serial.write.byte(0, 'X')
    -- serial.write.byte(0, '*n')
    ports[OCRnx] := level
:
--}}}

--{{{ PROC pwm16.set.compare
--* Sets the compare register on the given PWM pin.
-- @param avr.pin The [@em Architecture] pin to activate PWM on.
-- @param level The new level to set the compare register to.
PROC pwm16.set.compare (VAL INT avr.pin, VAL INT level)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  INITIAL INT OCRnx IS pwm16.compare.lookup (avr.pin):
  -- Not sure if this is the way to do it...
  -- Not sure if I'm a fan of relying on the highs being one up from the lows..
  set16 (OCRnx, level)
:
--}}

--{{{ PROC pwm16.set.top
--* Sets the 'top' register on the given PWM pin, effecting the highest
-- number the timer will count to before beging its down-count.
-- @param avr.pin The [@em Architecture] pin to activate PWM on.
-- @param top The new top to set the 'top' register.
PROC pwm16.set.top (VAL INT avr.pin, VAL INT top)
  INITIAL INT ICRn IS pwm16.ICRn.lookup (avr.pin):
  set16 (ICRn, top)
:
--}}}
#ENDIF

--** occam header for Arduino Duemilanove specific pin mappins.
-- @module pinmapping
#IF NOT (DEFINED (PINMAPPING.MODULE))
#DEFINE PINMAPPING.MODULE

-- Register constants for 328p, which we can expect
-- to find on the Duemilanove board.
#INCLUDE "iom328p.inc"
#INCLUDE "base.module"

-- Mappings for pin.location
VAL []INT DDR.MAP IS
  [DDRD, DDRD, DDRD, DDRD, DDRD, DDRD, DDRD, DDRD,
   DDRB, DDRB, DDRB, DDRB, DDRB, DDRB,
   DDRC, DDRC, DDRC, DDRC, DDRC, DDRC]:
VAL []INT PORT.MAP IS
  [PORTD, PORTD, PORTD, PORTD, PORTD, PORTD, PORTD, PORTD,
   PORTB, PORTB, PORTB, PORTB, PORTB, PORTB,
   PORTC, PORTC, PORTC, PORTC, PORTC, PORTC]:
VAL []INT PIN.MAP IS
  [PIND, PIND, PIND, PIND, PIND, PIND, PIND, PIND,
   PINB, PINB, PINB, PINB, PINB, PINB,
   PINC, PINC, PINC, PINC, PINC, PINC]:


--{{{  FUNCTION pin.location
--* Map an Arduino pin number to a DDR register, PORT register, PIN register
-- and bit number.
--
-- On the Arduino NG, Diecimilia, Duemilanove and similar boards:
--
-- [@item] digital pins 0-7 map to [@ref PORTD] bits 0-7
-- [@item] digital pins 8-13 map to [@ref PORTB] bits 0-5
-- [@item] analog pins 0-5 are also known as digital pins 14-19, and map to
--   [@ref PORTC] bits 0-5
--
-- A request for a pin out of range will result in an unrecoverable error.
--
-- @param pin Arduino pin number, as marked on the board
-- @returns ddr.reg The [@text DDR] register
-- @returns port.reg The [@text PORT] register
-- @returns pin.reg The [@text PIN] register
-- @returns bit The bit number in all the above registers
INT, INT, INT, INT INLINE FUNCTION pin.location (VAL INT pin)
  INT bit:
  VALOF
    IF
      (pin < 0) OR (pin > 19)
        die ("requested pin number is not valid (must be between 0 and 19)")
      pin < 8
        bit := pin
      pin < 14
        bit := pin - 8
      TRUE
        bit := pin - 14
    RESULT DDR.MAP[pin], PORT.MAP[pin], PIN.MAP[pin], bit
:
--}}}


#ENDIF
